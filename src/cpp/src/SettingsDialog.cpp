#include "include/SettingsDialog.h"
#include "ui_SettingsDialog.h" // This will be generated by AUTOUIC
#include <QFileDialog>
#include <QMessageBox>
#include <QStandardPaths>

// Initialize static member
QSettings* SettingsDialog::m_settings = nullptr;

SettingsDialog::SettingsDialog(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::SettingsDialog)
{
    ui->setupUi(this);
    setWindowFlags(windowFlags() & ~Qt::WindowContextHelpButtonHint);
    setWindowTitle(tr("Settings"));

    loadSettings();

    connect(ui->resetButton, &QPushButton::clicked, this, &SettingsDialog::on_resetButton_clicked);
    connect(ui->browseTempDirButton, &QPushButton::clicked, this, &SettingsDialog::on_browseTempDirButton_clicked);
}

SettingsDialog::~SettingsDialog()
{
    delete ui;
}

QSettings* SettingsDialog::getSettings()
{
    if (!m_settings) {
        // Using INI format for human-readability
        m_settings = new QSettings(QSettings::IniFormat, QSettings::UserScope, "PhoenixDRS", "PhoenixDRS_GUI");
    }
    return m_settings;
}

void SettingsDialog::loadSettings()
{
    QSettings* s = getSettings();

    // Performance Tab
    ui->maxThreadsSpinBox->setValue(s->value("Performance/MaxWorkerThreads", QVariant::fromValue(QThread::idealThreadCount())).toInt());
    ui->chunkSizeSpinBox->setValue(s->value("Performance/ChunkSizeKB", 1024).toInt());
    ui->directIOCheckBox->setChecked(s->value("Storage/DirectIO", false).toBool());
    ui->gpuAccelerationCheckBox->setChecked(s->value("Performance/EnableGpuAcceleration", false).toBool());

    // Storage Tab
    QString defaultTempPath = QStandardPaths::writableLocation(QStandardPaths::TempLocation) + "/PhoenixDRS";
    ui->tempDirLineEdit->setText(s->value("Storage/TempDirectory", defaultTempPath).toString());

    // Forensics Tab
    ui->autoHashCheckBox->setChecked(s->value("Forensics/AutoHash", true).toBool());
    ui->auditLevelComboBox->setCurrentIndex(s->value("Forensics/AuditLevel", 2).toInt());
}

void SettingsDialog::saveSettings()
{
    QSettings* s = getSettings();

    // Performance Tab
    s->setValue("Performance/MaxWorkerThreads", ui->maxThreadsSpinBox->value());
    s->setValue("Performance/ChunkSizeKB", ui->chunkSizeSpinBox->value());
    s->setValue("Storage/DirectIO", ui->directIOCheckBox->isChecked());
    s->setValue("Performance/EnableGpuAcceleration", ui->gpuAccelerationCheckBox->isChecked());

    // Storage Tab
    s->setValue("Storage/TempDirectory", ui->tempDirLineEdit->text());

    // Forensics Tab
    s->setValue("Forensics/AutoHash", ui->autoHashCheckBox->isChecked());
    s->setValue("Forensics/AuditLevel", ui->auditLevelComboBox->currentIndex());

    s->sync();
}

void SettingsDialog::setDefaults()
{
    // Create a temporary settings object to get default values without saving them
    QSettings* s = getSettings();
    s->remove(""); // Clear all settings to trigger defaults on next load

    // Reload the UI with default values
    loadSettings();

    QMessageBox::information(this, tr("Defaults Restored"), tr("All settings have been restored to their default values."));
}

void SettingsDialog::on_buttonBox_accepted()
{
    saveSettings();
    accept();
}

void SettingsDialog::on_browseTempDirButton_clicked()
{
    QString dir = QFileDialog::getExistingDirectory(this, tr("Select Temporary Directory"),
                                                    ui->tempDirLineEdit->text(),
                                                    QFileDialog::ShowDirsOnly | QFileDialog::DontResolveSymlinks);
    if (!dir.isEmpty()) {
        ui->tempDirLineEdit->setText(dir);
    }
}

void SettingsDialog::on_resetButton_clicked()
{
    QMessageBox::StandardButton reply;
    reply = QMessageBox::question(this, tr("Reset Settings"),
                                  tr("Are you sure you want to reset all settings to their defaults?"),
                                  QMessageBox::Yes | QMessageBox::No);
    if (reply == QMessageBox::Yes) {
        setDefaults();
    }
}

void SettingsDialog::changeEvent(QEvent *e)
{
    QDialog::changeEvent(e);
    switch (e->type()) {
    case QEvent::LanguageChange:
        ui->retranslateUi(this);
        break;
    default:
        break;
    }
}

// Static getters implementation
int SettingsDialog::maxWorkerThreads() {
    return getSettings()->value("Performance/MaxWorkerThreads", QVariant::fromValue(QThread::idealThreadCount())).toInt();
}

int SettingsDialog::chunkSizeKB() {
    return getSettings()->value("Performance/ChunkSizeKB", 1024).toInt();
}

bool SettingsDialog::useDirectIO() {
    return getSettings()->value("Storage/DirectIO", false).toBool();
}

QString SettingsDialog::tempDirectory() {
    QString defaultTempPath = QStandardPaths::writableLocation(QStandardPaths::TempLocation) + "/PhoenixDRS";
    return getSettings()->value("Storage/TempDirectory", defaultTempPath).toString();
}
