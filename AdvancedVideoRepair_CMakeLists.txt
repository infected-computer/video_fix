cmake_minimum_required(VERSION 3.16)
project(AdvancedVideoRepair VERSION 1.0.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Compiler-specific options
if(MSVC)
    add_compile_options(/W4 /WX /wd4996)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
else()
    add_compile_options(-Wall -Wextra -Werror -O3 -march=native)
endif()

# Find required packages
find_package(PkgConfig REQUIRED)

# FFmpeg
pkg_check_modules(LIBAV REQUIRED IMPORTED_TARGET
    libavcodec
    libavformat
    libavutil
    libavfilter
    libswscale
)

# OpenCV
find_package(OpenCV REQUIRED COMPONENTS
    core
    imgproc
    imgcodecs
    video
    photo
    objdetect
)

# CUDA (optional)
find_package(CUDA QUIET)
if(CUDA_FOUND)
    enable_language(CUDA)
    add_definitions(-DHAVE_CUDA)
    message(STATUS "CUDA found: ${CUDA_VERSION}")
else()
    message(STATUS "CUDA not found - GPU acceleration disabled")
endif()

# Threading
find_package(Threads REQUIRED)

# Include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/src/cpp/include
    ${OpenCV_INCLUDE_DIRS}
)

# Source files
set(ADVANCED_REPAIR_SOURCES
    src/cpp/src/AdvancedVideoRepair/AdvancedVideoRepairEngine.cpp
    src/cpp/src/AdvancedVideoRepair/ContainerAnalyzer.cpp
    src/cpp/src/AdvancedVideoRepair/BitstreamAnalyzer.cpp
    src/cpp/src/AdvancedVideoRepair/FrameReconstructor.cpp
    src/cpp/src/AdvancedVideoRepair/MotionEstimator.cpp
    src/cpp/src/AdvancedVideoRepair/TemporalInterpolator.cpp
)

# Header files
set(ADVANCED_REPAIR_HEADERS
    src/cpp/include/AdvancedVideoRepair/AdvancedVideoRepairEngine.h
)

# Create static library
add_library(advanced_video_repair_static STATIC
    ${ADVANCED_REPAIR_SOURCES}
    ${ADVANCED_REPAIR_HEADERS}
)

# Create shared library
add_library(advanced_video_repair_shared SHARED
    ${ADVANCED_REPAIR_SOURCES}
    ${ADVANCED_REPAIR_HEADERS}
)

# Set library properties
set_target_properties(advanced_video_repair_static PROPERTIES
    OUTPUT_NAME advanced_video_repair
    VERSION ${PROJECT_VERSION}
    SOVERSION 1
)

set_target_properties(advanced_video_repair_shared PROPERTIES
    OUTPUT_NAME advanced_video_repair
    VERSION ${PROJECT_VERSION}
    SOVERSION 1
)

# Link libraries for static library
target_link_libraries(advanced_video_repair_static
    PkgConfig::LIBAV
    ${OpenCV_LIBS}
    Threads::Threads
)

# Link libraries for shared library  
target_link_libraries(advanced_video_repair_shared
    PkgConfig::LIBAV
    ${OpenCV_LIBS}
    Threads::Threads
)

# Add CUDA support if available
if(CUDA_FOUND)
    target_link_libraries(advanced_video_repair_static ${CUDA_LIBRARIES})
    target_link_libraries(advanced_video_repair_shared ${CUDA_LIBRARIES})
endif()

# Demo executable
add_executable(video_repair_demo
    demo/main.cpp
)

target_link_libraries(video_repair_demo
    advanced_video_repair_static
)

# Installation
install(TARGETS advanced_video_repair_static advanced_video_repair_shared
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)

install(DIRECTORY src/cpp/include/AdvancedVideoRepair
    DESTINATION include
    FILES_MATCHING PATTERN "*.h"
)

install(TARGETS video_repair_demo
    RUNTIME DESTINATION bin
)

# Print configuration summary
message(STATUS "=== Advanced Video Repair Configuration ===")
message(STATUS "Version: ${PROJECT_VERSION}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "FFmpeg found: ${LIBAV_FOUND}")
message(STATUS "OpenCV version: ${OpenCV_VERSION}")
message(STATUS "OpenCV libs: ${OpenCV_LIBS}")
message(STATUS "CUDA support: ${CUDA_FOUND}")
message(STATUS "===========================================")